// Icinga2 Aggregation Services.
// Max.Fischer (c) 2024 - Licensed under M.I.T.
// Updates: https://github.com/xyhtac/icingatelegram


// List_services - Generates concatenated text output of all services for the given host / host group
// wildcards: groupname = host (list only host services), identifier = all (sets * pattern for all services)

apply Service for (identifier => groupname in host.vars.list_services) {
  name = "services-" + groupname + "-" + identifier
  display_name = "services-" + groupname + "-" + identifier
  vars.service_pattern = identifier
  vars.host_groupname = groupname

  max_check_attempts = 5
  check_interval = 3m
  retry_interval = 1m
 
  check_command = "dummy"
  vars.dummy_text = {{
	// get vars from service and convert to plaintext
	var this_servicename = macro("$name$")
	var service_pattern = macro("$service_pattern$")
	if ( service_pattern == "all") {
		service_pattern = "*"
	}
	var applied_group = macro("$host_groupname$")
	if ( applied_group == "host") {
		var applied_host = macro("$host.name$")
		//var applied_hosts = [ applied_host ]
		f = function(node) use(applied_host) { match( applied_host, node.name )  }
		var applied_hosts = get_objects(Host).filter(f)
	} else {
		// define lambda function to pass variable to host filter
		f = function(node) use(applied_group) { applied_group in node.groups }
		var applied_hosts = get_objects(Host).filter(f)
	}
		
	var status = "SERVICE DETAILS: \n\n"
	var hostStatus = ""
	var hostText = ""
	
	for (host in applied_hosts) {
	
		hostText = host.name
		hostStatus = " * " + hostText + " (" + service_pattern + "):\n"
		serviceCount = 0
	
		// define lambda function to pass variables to service filter
		f = function(node) use(hostText, service_pattern) { match( hostText, node.host_name ) && match( "*" + service_pattern + "*", node.name ) }
		var applied_services = get_objects(Service).filter(f)
		var serviceStateIcon = [ "✅ ", "⚠️ ", "⭕ " , "⏳ " ]
	
		for (service in applied_services) {
			servicenameText = service.name
			// prevent listing self
			if ( servicenameText != this_servicename) {
				serviceOutput = get_service(hostText, service.name ).last_check_result.output
				serviceState = get_service(hostText, service.name ).last_check_result.state
				stateIcon = serviceStateIcon[ serviceState ]

				hostStatus = hostStatus + stateIcon + servicenameText + ": " + serviceOutput + "\n"
				serviceCount = serviceCount + 1
			}
		}
		
		if (serviceCount > 0) {
			status = status + hostStatus + "\n"
		}

	}
    return status
  }}
  
  vars.dummy_state = 0  
}

// Group_list - Generate concatenated text output of specific services for the given group
apply Service for (identifier => groupname in host.vars.group_list) {
  name = groupname + "-" + identifier
  display_name = groupname + "-" + identifier
  
  vars.group_name = groupname
  vars.group_service = identifier

  max_check_attempts = 5
  check_interval = 3m
  retry_interval = 1m
 
  check_command = "dummy"
  vars.dummy_text = {{
	var status = "DETAILS:\n\n"
	
	// get vars from service and convert to plaintext
	var applied_group = macro("$group_name$")
	var applied_service = macro("$group_service$")
	// define lambda function to pass variable to filter
	f = function(node) use(applied_group) { applied_group in node.groups }
	var applied_hosts = get_objects(Host).filter(f)
	var serviceStateIcon = [ "✅ ", "⚠️ ", "⭕ " , "⏳ " ]
	
    for (node in applied_hosts) {
		hostnameText = node.name
		serviceStatus = get_service(node.name, applied_service ).last_check_result.output
		serviceState = get_service(node.name, applied_service ).last_check_result.state
		stateIcon = serviceStateIcon[ serviceState ]
		status = status + hostnameText + "\n" + stateIcon + serviceStatus + "\n\n"
    }
    return status
  }}
  
  vars.dummy_state = 0
	
// Uncomment if state calculation for dummy object is desired	
//  vars.dummy_state = {{
//	var service_state = []
//	var state = 0
//	
// 	//get vars from service and convert to plaintext
//	var applied_group = macro("$group_name$")
//	var applied_service = macro("$group_service$")
//	// define lambda function to pass variable to filter
//	f = function(node) use(applied_group) { applied_group in node.groups }
//	var applied_hosts = get_objects(Host).filter(f)
//	//var applied_hosts = get_objects(Host).filter(h => "ti-servers" in h.groups)
//	for (node in applied_hosts) {
//		service_state.add(get_service(node.name, applied_service ).last_check_result.state)
//    }
//	for (current_state in service_state) {
//		if (current_state > state) {
//			state = current_state
//		}
//	}
//	return state
//  }}
  
}



// Group_summary - Generates status summary of specific service for the given group
// wildcards: identifier = host (list hosts instead of services)
apply Service for (identifier => servicename in host.vars.group_summary) {
  name = identifier + "-" + servicename
  display_name = identifier + "-" + servicename
  
  vars.group_name = identifier
  vars.group_service = servicename
  
  max_check_attempts = 5
  check_interval = 3m
  retry_interval = 1m
  
  check_command = "dummy"
  vars.dummy_text = {{
	var status_ok = 0
	var status_warning = 0
	var status_critical = 0
	var acknowledgedCount = 0
	var serviceAck = 0
	
	// get vars from service and convert to plaintext
	var applied_group = macro("$group_name$")
	var applied_service = macro("$group_service$")
	// define lambda function to pass variable to filter
	f = function(node) use(applied_group) { applied_group in node.groups }
	var applied_hosts = get_objects(Host).filter(f)
	
    for (node in applied_hosts) {
		if (applied_service == "host") {
			serviceState = node.last_check_result.state
		} else {
			serviceState = get_service(node.name, applied_service).last_check_result.state
		}
		serviceAck = node.acknowledgement
		
		if (serviceState == 0) {
			status_ok = status_ok + 1
		} else if (serviceState == 2 && serviceAck == 0) {
			status_critical = status_critical + 1
		} else if (serviceState == 1 && serviceAck == 0) {
			status_warning = status_warning + 1
		}
		if (serviceAck != 0 ) {
			acknowledgedCount = acknowledgedCount + 1
		}
		
    }
	var status = "HOST STATE SUMMARY:\n\n    ✅ OK: " + status_ok + "\n    ⚠️ WARNING: " + status_warning + "\n    ⭕ CRITICAL: " + status_critical + "\n    ⏳ MAINTENANCE: " + acknowledgedCount;
    return status
  }}

  vars.dummy_state = 0
  
// Uncomment if state calculation for dummy object is desired
//  vars.dummy_state = {{
//	var service_state = []
//	var state = 0
//	// get vars from service and convert to plaintext
//	var applied_group = macro("$group_name$")
//	var applied_service = macro("$group_service$")
//	// define lambda function to pass variable to filter
//	f = function(node) use(applied_group) { applied_group in node.groups }
//	var applied_hosts = get_objects(Host).filter(f)
//	// var applied_hosts = get_objects(Host).filter(h => "ti-cams" in h.groups)
//	
//	for (node in applied_hosts) {
//		service_state.add(get_service(node.name, applied_service).last_check_result.state)
//    }
//	for (current_state in service_state) {
//		if (current_state > state) {
//			state = current_state
//		}
//	}
//	return state
//  }}
  
}


// Group_count - count non-null values of specific service for the given group
apply Service for (identifier => servicename in host.vars.group_count) {
  name = identifier + "-" + servicename
  display_name = identifier + "-" + servicename
  
  vars.group_name = identifier
  vars.group_service = servicename
  
  max_check_attempts = 5
  check_interval = 3m
  retry_interval = 1m
  
  check_command = "dummy"
  vars.dummy_text = {{
	var serviceOut = ""
	var serviceSum = 0
	
	// get vars from service and convert to plaintext
	var applied_group = macro("$group_name$")
	var applied_service = macro("$group_service$")
	
	// define lambda function to pass variable to filter
	f = function(node) use(applied_group) { applied_group in node.groups }
	var applied_hosts = get_objects(Host).filter(f)
	
    for (node in applied_hosts) {
		serviceOut = get_service(node.name, applied_service).last_check_result.performance_data[0]
		serviceValue = parse_performance_data(serviceOut).value
		if (serviceValue > 0) {
			serviceSum = serviceSum + serviceValue
		} 
    }

    return serviceSum
  }}
  
  vars.dummy_state = 0
}